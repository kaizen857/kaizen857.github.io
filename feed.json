{
    "version": "https://jsonfeed.org/version/1",
    "title": "kaizen857のblog",
    "subtitle": "这是一只想摸鱼的菜鸟~",
    "icon": "https://kaizen857.github.io/assets/favicon.ico",
    "description": "懒得写捏~~",
    "home_page_url": "https://kaizen857.github.io",
    "items": [
        {
            "id": "https://kaizen857.github.io/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/",
            "url": "https://kaizen857.github.io/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/",
            "title": "vscode EIDE下移植LVGL到stm32",
            "date_published": "2025-04-13T00:55:17.000Z",
            "content_html": "<h2 id=\"说在前头\"><a class=\"anchor\" href=\"#说在前头\">#</a> 说在前头</h2>\n<p>  将所有的源码文件全部添加进工程这行为或许有人觉得会严重的增加目标文件的大小，但实际上并不会增加编译后的目标文件大小，只是会使编译过程稍微久一点。</p>\n<p>  编译阶段编译器会将所有在工程里面的源文件编译成 .o 二进制文件。但在链接阶段，链接器只会将用到的函数对应的  .o  文件链接起来，没有用到的  .o  文件并不会链接进目标文件内，对这方面感到疑惑的可以看去 C/C++ 的编译过程。</p>\n<h3 id=\"对于各种工程-包括非-stm32-的-cc工程\"><a class=\"anchor\" href=\"#对于各种工程-包括非-stm32-的-cc工程\">#</a> 对于各种工程 （包括非 STM32 的 C/C++ 工程）</h3>\n<p>  多余添加源码文件进编译：</p>\n<p>  绝大部分情况下是没问题的，不被调用的函数 链接器 不会使用 那个函数所在的 .o 文件。多余添加源码文件的影响只有增加编译时间、产生多一点的 .o 文件占用电脑硬盘，最终编译出来的目标文件即烧录进 STM32 的那个文件保持不变。</p>\n<p>  极少数情况下，多添加文件进行编译会产生冲突，比如 STM32F429 的 FMC 和 FSMC 源文件，同时只能编译一个，这还可能是 库文件设计者 有意为之。</p>\n<p>  少添加源码文件进编译：</p>\n<p>  必定出问题，找不到头文件、函数未定义、符号未定义 等等。</p>\n<h2 id=\"环境介绍\"><a class=\"anchor\" href=\"#环境介绍\">#</a> 环境介绍</h2>\n<p>  本人使用的代码编写环境：VScode + stm32cubemx + EIDE + clangd</p>\n<p>  由于实在忍受不了 keil 那沟槽的编辑器，所以在知道了 EIDE 能直接导入 keil 还有 cubeIDE 的工程之后果断地选择跑回了 vscode .jpg</p>\n<p>  顺带一提最近看到有大佬在 vscode 上整了个支持 vivado 的插件，也就是说现在你还能在 vscode 上写 FPGA 的代码了。真就一个 vscode 写全部（</p>\n<h2 id=\"前期准备默认你各种工具都有了jpg\"><a class=\"anchor\" href=\"#前期准备默认你各种工具都有了jpg\">#</a> 前期准备（默认你各种工具都有了.jpg）</h2>\n<h3 id=\"获取lvgl源码\"><a class=\"anchor\" href=\"#获取lvgl源码\">#</a> 获取 LVGL 源码</h3>\n<p>LVGL 源码仓库地址：<a href=\"https://github.com/lvgl/lvgl\">https://github.com/lvgl/lvgl</a></p>\n<p>你可以使用 git 将整个项目 clone 下来，或者你也可以在右上方点击 code 然后选 Download ZIP 把源码下载下来：</p>\n<p><img loading=\"lazy\" data-src=\"Download_zip.png\" alt=\"Download ZIP\"></p>\n<p>想要不同的版本的话也可以在左上角切分支到不同的 Releases 版本，或者直接从右侧的 Releases 内下载不同版本的源码：</p>\n<p><img loading=\"lazy\" data-src=\"%E5%88%87%E6%8D%A2%E7%89%88%E6%9C%AC.png\" alt=\"切换版本\"></p>\n<h4 id=\"lvgl源码文件夹如下图\"><a class=\"anchor\" href=\"#lvgl源码文件夹如下图\">#</a> LVGL 源码文件夹如下图：</h4>\n<p>不管版本如何变，移植到 STM32 (用 Keil 编译) 时，src 文件夹和 源码根目录 下的 .h 、.c  文件都一概先复制过去。</p>\n<p><img loading=\"lazy\" data-src=\"LVGL%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6.png\" alt=\"LVGL源码文件\"></p>\n<h3 id=\"新建工程\"><a class=\"anchor\" href=\"#新建工程\">#</a> 新建工程</h3>\n<p>这边我们使用 cubeMX 新建一个 STM32 的工程</p>\n<p>运行 LVGL 的最低要求：</p>\n<p><img loading=\"lazy\" data-src=\"%E6%9C%80%E4%BD%8E%E8%A6%81%E6%B1%82.png\" alt=\"最低要求\"></p>\n<p>  实际如果你跑 demo 里面的 bunchmark 的话上面的要求完全不够用（</p>\n<p><img loading=\"lazy\" data-src=\"bunchmark%E5%8D%A0%E7%94%A8.png\" alt=\"bunchmark\"></p>\n<center>跑bunchmark demo时的实际资源占用</center>\n<br>\n<br>\n&emsp;&emsp;我这边使用的mcu是stm32f412rgt6，在cubemx里面选择stm32f412rgt，然后按照自己的需求把外部高速晶振打开，主频拉到最大，使用SPI1，并把SPI1的中断和DMA给打开\n<p><img loading=\"lazy\" data-src=\"%E6%97%B6%E9%92%9F.png\" alt=\"时钟设置\" title=\"时钟设置\"></p>\n<p><img loading=\"lazy\" data-src=\"SPI%E8%AE%BE%E7%BD%AE.png\" alt=\"SPI设置\" title=\"SPI设置\"></p>\n<p><img loading=\"lazy\" data-src=\"%E4%B8%AD%E6%96%AD.png\" alt=\"中断设置\" title=\"中断设置\"></p>\n<p><img loading=\"lazy\" data-src=\"DMA.png\" alt=\"DMA设置\" title=\"DMA设置\"></p>\n<p>工程设置界面的工具链选择 STM32CubeIDE，在设置完工程之后就可以生成代码了，生成代码时个人推荐选择为不同的外设生成不同的 .c/.h 文件，这样代码不用一股脑的全扔进 main.c 里面，能更方便管理。另外注意堆栈要开大一点，默认的堆栈大小跑 lvgl 可能会炸</p>\n<p><img loading=\"lazy\" data-src=\"toolchan.png\" alt=\"toolchan\"></p>\n<p><img loading=\"lazy\" data-src=\"setting.png\" alt=\"setting\"></p>\n<p>(注意我这边选的是 copy only necessary library files)</p>\n<p><img loading=\"lazy\" data-src=\"stack.png\" alt=\"stack\"></p>\n<h2 id=\"代码移植\"><a class=\"anchor\" href=\"#代码移植\">#</a> 代码移植</h2>\n<h3 id=\"移植lvgl\"><a class=\"anchor\" href=\"#移植lvgl\">#</a> 移植 LVGL</h3>\n<p>工程创建好后我们先在工程根目录创建 lvgls 文件夹，里面新建两个文件夹，分别为存放 lvgl 代码的 lvgl 文件夹和存放自己写的 lvgl 相关代码的 lvgl_app 个人文件夹，不过后者本次工程没用到，也可以不创建</p>\n<h4 id=\"项目内lvgl源码文件夹\"><a class=\"anchor\" href=\"#项目内lvgl源码文件夹\">#</a> 项目内 lvgl 源码文件夹</h4>\n<p><font color=\"orange\">LVGL 源码文件夹</font> 下的 demos、src 文件夹 直接原封不动复制到 lvgl 文件夹下。</p>\n<p><font color=\"orange\">LVGL 源码文件夹</font> 下的 examples 文件夹也可以直接原封不动复制过来，但实际只需要里面的 porting 文件夹，所以自己精简。</p>\n<p><font color=\"orange\">LVGL 源码文件夹</font> 根目录的  .c 、.h  文件一并复制到 lvgl 下。</p>\n<p>搞定上面的步骤后，lvgl 下的  <code>lv_conf_template.h</code>  复制到上一层目录 （即 lvgls 中），并改名为   <code>lv_conf.h</code>  。</p>\n<p><img loading=\"lazy\" data-src=\"lvgl_files.png\" alt=\"lvgl_files\"></p>\n<p>将  <code>lvgl / examples / porting</code>  中选中的文件复制到 与  <code>lv_conf.h</code>  文件同一目录下，并把 template 字眼去掉。分别是 （ **disp ）显示 设备和 （**indev ）输入设备的接口。</p>\n<p><img loading=\"lazy\" data-src=\"lvgl_conf.png\" alt=\"lvgl_conf\"></p>\n<center> 完成后的lvgls文件夹</center>\n<h3 id=\"导入项目到eide\"><a class=\"anchor\" href=\"#导入项目到eide\">#</a> 导入项目到 EIDE</h3>\n<p>在 vscode 内打开 EIDE，选择导入项目，在中间弹出的选项里面选择 Eclipse</p>\n<p><img loading=\"lazy\" data-src=\"EIDE%E5%AF%BC%E5%85%A5.png\" alt=\"EIDE导入\"></p>\n<p>然后选择你工程根目录下的.cproject</p>\n<p><img loading=\"lazy\" data-src=\"cproject.png\" alt=\"EIDE导入\"></p>\n<p>导入完成后，切换 VSCode 工作区</p>\n<p><img loading=\"lazy\" data-src=\"switch.png\" alt=\"切换工作区\"></p>\n<p>由于 Eclipse CDT 和 EIDE 之间的设计差异，EIDE 暂时不能兼容 Eclipse 项目中的一些项目属性和构建设置</p>\n<p>导入完成后，将生成一个 .warning.txt 文件，其中记录了所有不兼容的 Eclipse 项目属性</p>\n<p>我们需要根据这些属性的 名称 和 值 的含义修改 EIDE 项目的 构建器选项，直到可以正确编译</p>\n<p><img loading=\"lazy\" data-src=\"warning.png\" alt=\"warning\"></p>\n<p>正常情况下我们只需要改这几个就差不多了.jpg</p>\n<p><img loading=\"lazy\" data-src=\"%E9%85%8D%E7%BD%AE.png\" alt=\"配置\"></p>\n<h3 id=\"lvgl文件添加进工程\"><a class=\"anchor\" href=\"#lvgl文件添加进工程\">#</a> LVGL 文件添加进工程</h3>\n<p>如图.jpg<br>\n<img loading=\"lazy\" data-src=\"%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%BA%90.png\" alt=\"项目资源\"></p>\n<p><img loading=\"lazy\" data-src=\"%E9%A1%B9%E7%9B%AE%E5%B1%9E%E6%80%A7.png\" alt=\"项目属性\"></p>\n<p>添加项目属性内的包含目录时的偷懒办法：</p>\n<p><img loading=\"lazy\" data-src=\"%E5%81%B7%E6%87%92.png\" alt=\"偷懒\"></p>\n<p><img loading=\"lazy\" data-src=\"%E5%81%B7%E6%87%922.png\" alt=\"偷懒\"></p>\n<p>在这里面你可以直接将包含目录直接复制粘贴进去</p>\n<p>如果你的 lvgl 文件位置和文件夹名称和我的一样，就可以啥也不改，直接黏贴。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">-</span> Core/Inc</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">-</span> Drivers/STM32F4xx_HAL_Driver/Inc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">-</span> Drivers/STM32F4xx_HAL_Driver/Inc/Legacy</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">-</span> Drivers/CMSIS/Device/ST/STM32F4xx/Include</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">-</span> Drivers/CMSIS/Include</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/src</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/src/core</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/src/display</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/src/draw</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/src/drivers</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/src/font</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/src/indev</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/src/layouts</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/src/libs</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/src/misc</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/src/osal</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/src/others</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/src/stdlib</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/src/themes</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/src/tick</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/src/widgets</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/demos</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/demos/benchmark</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/demos/widgets</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/demos/scroll</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">-</span> lvgls/lvgl/demos/music</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">-</span> c<span class=\"token punctuation\">:</span>/ST/STM32CubeCLT_1.16.0/GNU<span class=\"token punctuation\">-</span>tools<span class=\"token punctuation\">-</span>for<span class=\"token punctuation\">-</span>STM32/arm<span class=\"token punctuation\">-</span>none<span class=\"token punctuation\">-</span>eabi/include</pre></td></tr></table></figure><h3 id=\"lvgl设置\"><a class=\"anchor\" href=\"#lvgl设置\">#</a> LVGL 设置</h3>\n<h4 id=\"给lvgl加心跳\"><a class=\"anchor\" href=\"#给lvgl加心跳\">#</a> 给 LVGL 加心跳</h4>\n<p>伴随  <code>HAL_IncTick();</code>  所在位置，本例是  <code>stm32f4xx_it.c</code>   文件中：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"lv_tick.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**** 其它 ******/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SysTick_Handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">HAL_IncTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">lv_tick_inc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当然也可以 改为 选择在 定时器中断中 执行 <code>lv_tick_inc(1);</code></p>\n<h4 id=\"lv_confh中\"><a class=\"anchor\" href=\"#lv_confh中\">#</a> lv_conf.h 中：</h4>\n<p>打开  <code>lv_conf.h</code>  ，把 第一个  <code># if 0</code>   改为  <code># if 1</code>  从而使能文件，下文简称 使能文件。</p>\n<p>文件中  <code>#define LV_COLOR_DEPTH 16</code>   是配置屏幕色彩深度、我的 LCD 屏幕是 RGB565 , 所以保持无需变更。</p>\n<p>有使能 demo 的宏，本例跑 bunchmark 例子，所以使能：</p>\n<p><img loading=\"lazy\" data-src=\"demo%E4%BD%BF%E8%83%BD.png\" alt=\"使能\"></p>\n<center>(bunchmark要求将WIDGETS也打开)</center>\n<h4 id=\"lv_port_dispc-中\"><a class=\"anchor\" href=\"#lv_port_dispc-中\">#</a> lv_port_disp.c 中：</h4>\n<p>使能文件后（注意，对应的头文件也要使能）添加需要的屏幕驱动的头文件，并修改分辨率适配自己的屏幕</p>\n<p><img loading=\"lazy\" data-src=\"defines.png\" alt=\"defines\"></p>\n<p>修改  <code>lv_port_disp_init()</code>  函数，分配内存，由于我们需要使用 DMA 来进行数据传输，所以使用模板的 Example 2</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LV_ATTRIBUTE_MEM_ALIGN</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">section</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".ccmram\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> buf_2_1<span class=\"token punctuation\">[</span>MY_DISP_HOR_RES <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> BYTE_PER_PIXEL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    LV_ATTRIBUTE_MEM_ALIGN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">section</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".ccmram\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> buf_2_2<span class=\"token punctuation\">[</span>MY_DISP_HOR_RES <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> BYTE_PER_PIXEL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">lv_display_set_buffers</span><span class=\"token punctuation\">(</span>disp<span class=\"token punctuation\">,</span> buf_2_1<span class=\"token punctuation\">,</span> buf_2_2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf_2_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> LV_DISPLAY_RENDER_MODE_PARTIAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>修改 <code>disp_flush()</code>  函数，这个函数是 LVGL 用来向屏幕写数据的函数（刷屏函数），所以需要根据对应的屏幕编写对应的代码，本例的代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">disp_flush</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lv_display_t</span> <span class=\"token operator\">*</span>disp_drv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">lv_area_t</span> <span class=\"token operator\">*</span>area<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>px_map<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>disp_flush_enabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">uint64_t</span> totalSize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>area<span class=\"token operator\">-></span>x2 <span class=\"token operator\">-</span> area<span class=\"token operator\">-></span>x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>area<span class=\"token operator\">-></span>y2 <span class=\"token operator\">-</span> area<span class=\"token operator\">-></span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> BYTE_PER_PIXEL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">HAL_SPI_GetState</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hspi1<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> HAL_SPI_STATE_READY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">LCD_SetWindows</span><span class=\"token punctuation\">(</span>area<span class=\"token operator\">-></span>x1<span class=\"token punctuation\">,</span> area<span class=\"token operator\">-></span>y1<span class=\"token punctuation\">,</span> area<span class=\"token operator\">-></span>x2<span class=\"token punctuation\">,</span> area<span class=\"token operator\">-></span>y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        LCD_CS_CLR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        LCD_RS_SET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">HAL_SPI_Transmit_DMA</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hspi1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>px_map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> totalSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/*IMPORTANT!!!</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     *Inform the graphics library that you are ready with the flushing*/</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// lv_display_flush_ready(disp_drv);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">HAL_SPI_TxCpltCallback</span><span class=\"token punctuation\">(</span>SPI_HandleTypeDef <span class=\"token operator\">*</span>hspi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    LCD_CS_SET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">LCD_SetWindows</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lcddev<span class=\"token punctuation\">.</span>width <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> lcddev<span class=\"token punctuation\">.</span>height <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">lv_display_flush_ready</span><span class=\"token punctuation\">(</span>disp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"lv_port_indevc-中\"><a class=\"anchor\" href=\"#lv_port_indevc-中\">#</a> lv_port_indev.c 中：</h4>\n<p>使能文件、添加必要的 触摸屏头文件如  <code>#include &quot;touch.h&quot;</code></p>\n<p>函数  <code>lv_port_indev_init</code>  中仅保留  <code>touchpad</code>  部分的代码，其他代码可以注释掉或者删除</p>\n<p>然后修改 <code>touchpad_read()</code>   <code>touchpad_is_pressed()</code>   <code>touchpad_get_xy()</code>  这三个函数</p>\n<p>本例中我的代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">touchpad_read</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lv_indev_t</span> <span class=\"token operator\">*</span>indev_drv<span class=\"token punctuation\">,</span> <span class=\"token class-name\">lv_indev_data_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">int32_t</span> last_x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">int32_t</span> last_y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/*Save the pressed coordinates and the state*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">touchpad_is_pressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">touchpad_get_xy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>last_x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>last_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        data<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> LV_INDEV_STATE_PRESSED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        data<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> LV_INDEV_STATE_RELEASED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/*Set the last pressed coordinates*/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    data<span class=\"token operator\">-></span>point<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> last_x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    data<span class=\"token operator\">-></span>point<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> last_y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">/*Return true is the touchpad is pressed*/</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">static</span> bool <span class=\"token function\">touchpad_is_pressed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/*Your code comes here*/</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">FT6336_Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//return false;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">/*Get the x and y coordinates if the touchpad is pressed*/</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">touchpad_get_xy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">int32_t</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">int32_t</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">/*Your code comes here*/</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> tp_dev<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> tp_dev<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"mainc中\"><a class=\"anchor\" href=\"#mainc中\">#</a> main.c 中</h4>\n<p>引入头文件：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"lvgl.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"lv_port_disp.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"lv_port_indev.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"lv_demos.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"lv_demo_benchmark.h\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"touch.h\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"delay.h\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"lcd.h\"</span></span></pre></td></tr></table></figure><p><code>main()</code>  函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">HAL_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">SystemClock_Config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">MX_GPIO_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">MX_DMA_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">MX_SPI1_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">delay_init</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">LCD_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">LCD_direction</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">TP_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">lv_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">lv_port_disp_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">lv_port_indev_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">lv_demo_benchmark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">lv_task_handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">HAL_Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"烧录前设置\"><a class=\"anchor\" href=\"#烧录前设置\">#</a> 烧录前设置</h3>\n<p>在构建器选项里的 c/c++ 编译器选项内，选择 c 和 c++ 的标准，推荐两个的标准都大于 c11 /c++11</p>\n<p><img loading=\"lazy\" data-src=\"%E6%A0%87%E5%87%86%E8%AE%BE%E7%BD%AE.png\" alt=\"标准设置\"></p>\n<p>链接器输出格式为 ELF 文件</p>\n<p><img loading=\"lazy\" data-src=\"%E9%93%BE%E6%8E%A5%E5%99%A8.png\" alt=\"链接器\"></p>\n<p>然后编译、烧录、运行、大功告成.jpg</p>\n<h3 id=\"clangd相关问题\"><a class=\"anchor\" href=\"#clangd相关问题\">#</a> Clangd 相关问题</h3>\n<h4 id=\"疯狂报错无法找到头文件\"><a class=\"anchor\" href=\"#疯狂报错无法找到头文件\">#</a> 疯狂报错无法找到头文件</h4>\n<p>在项目里面，clangd 对于头文件以及相应函数的查找都是通过 <code>compile_commands.json</code>  这个文件实现的，这个文件保存了项目中每个源文件的编译命令（包括编译器、选项、头文件路径、宏定义等）。EIDE 在每次构建的时候都会在 <code>build</code>  文件夹下面生成对应的 <code>compile_commands.json</code>  文件，但 clangd 默认只搜索工程根目录下是否有这个文件，不会搜索 <code>build</code>  文件夹。想要 clangd 找到 <code>compile_commands.json</code>  文件，有两个办法：</p>\n<p>一是在 settings.json 里面手动指定 <code>compile_commands.json</code>  文件的路径</p>\n<p>二是在构建器选项的用户任务里面添加一个构建后任务，把 <code>compile_commands.json</code>  复制到工程根目录里面</p>\n<p><img loading=\"lazy\" data-src=\"%E6%9E%84%E5%BB%BA%E5%90%8E%E4%BB%BB%E5%8A%A1.png\" alt=\"构建后任务\"></p>\n<h4 id=\"能识别lvgl等头文件但无法使用标准库的头文件\"><a class=\"anchor\" href=\"#能识别lvgl等头文件但无法使用标准库的头文件\">#</a> 能识别 lvgl 等头文件但无法使用标准库的头文件</h4>\n<p>问题原因与上面差不多，只不过是因为 <code>compile_commands.json</code>  内没包含标准库的文件路径</p>\n<p>解决办法也很简单，在项目属性 -&gt; 包含目录里面添加使用的标准库的 include 路径，如：</p>\n<p><img loading=\"lazy\" data-src=\"std%E8%B7%AF%E5%BE%84.png\" alt=\"std路径\"></p>\n<p><s>用这一套环境比在 keil 里面写代码舒服多了.jpg</s></p>\n",
            "tags": [
                "stm32",
                "lvgl",
                "lvgl",
                "stm32"
            ]
        },
        {
            "id": "https://kaizen857.github.io/test/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/",
            "url": "https://kaizen857.github.io/test/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/",
            "title": "图片测试",
            "date_published": "2025-04-11T14:53:58.000Z",
            "content_html": "<h1 id=\"测试图片\"><a class=\"anchor\" href=\"#测试图片\">#</a> 测试图片</h1>\n<p><img loading=\"lazy\" data-src=\"160_60439088.png\" alt=\"这是测试图片\"></p>\n",
            "tags": [
                "test",
                "test"
            ]
        },
        {
            "id": "https://kaizen857.github.io/test/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/",
            "url": "https://kaizen857.github.io/test/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/",
            "title": "测试文章",
            "date_published": "2025-04-11T06:10:11.000Z",
            "content_html": "<h1 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h1>\n<p>这是博客上的第一篇非自动生成的文章.jpg</p>\n",
            "tags": [
                "test"
            ]
        },
        {
            "id": "https://kaizen857.github.io/test/hello-world/",
            "url": "https://kaizen857.github.io/test/hello-world/",
            "title": "Hello World",
            "date_published": "2025-04-11T05:34:12.679Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        }
    ]
}