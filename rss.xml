<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>kaizen857のblog</title>
        <subtitle>这是一只想摸鱼的菜鸟~</subtitle>
        <icon>https://kaizen857.github.io/assets/favicon.ico</icon>
        <link>https://kaizen857.github.io</link>
        <author>
          <name>kaizen857</name>
        </author>
        <description>懒得写捏~~</description>
        <language>zh-CN</language>
        <pubDate>Sun, 13 Apr 2025 08:55:17 +0800</pubDate>
        <lastBuildDate>Sun, 13 Apr 2025 08:55:17 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://kaizen857.github.io/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/</guid>
            <title>vscode EIDE下移植LVGL到stm32</title>
            <link>https://kaizen857.github.io/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/</link>
            <category term="stm32" scheme="https://kaizen857.github.io/categories/stm32/" />
            <category term="lvgl" scheme="https://kaizen857.github.io/categories/stm32/lvgl/" />
            <category term="lvgl" scheme="https://kaizen857.github.io/tags/lvgl/" />
            <category term="stm32" scheme="https://kaizen857.github.io/tags/stm32/" />
            <pubDate>Sun, 13 Apr 2025 08:55:17 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;说在前头&#34;&gt;&lt;a href=&#34;#说在前头&#34; class=&#34;headerlink&#34; title=&#34;说在前头&#34;&gt;&lt;/a&gt;说在前头&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;将所有的源码文件全部添加进工程这行为或许有人觉得会严重的增加目标文件的大小，但实际上并不会增加编译后的目标文件大小，只是会使编译过程稍微久一点。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;编译阶段编译器会将所有在工程里面的源文件编译成 .o 二进制文件。但在链接阶段，链接器只会将用到的函数对应的  .o  文件链接起来，没有用到的  .o  文件并不会链接进目标文件内，对这方面感到疑惑的可以看去 C&amp;#x2F;C++ 的编译过程。&lt;/p&gt;
&lt;h3 id=&#34;对于各种工程-（包括非-STM32-的-C-C-工程）&#34;&gt;&lt;a href=&#34;#对于各种工程-（包括非-STM32-的-C-C-工程）&#34; class=&#34;headerlink&#34; title=&#34;对于各种工程 （包括非 STM32 的 C&amp;#x2F;C++工程）&#34;&gt;&lt;/a&gt;对于各种工程 （包括非 STM32 的 C&amp;#x2F;C++工程）&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;多余添加源码文件进编译：&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;绝大部分情况下是没问题的，不被调用的函数 链接器 不会使用 那个函数所在的 .o 文件。多余添加源码文件的影响只有增加编译时间、产生多一点的 .o 文件占用电脑硬盘，最终编译出来的目标文件即烧录进 STM32 的那个文件保持不变。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;极少数情况下，多添加文件进行编译会产生冲突，比如 STM32F429 的 FMC 和 FSMC 源文件，同时只能编译一个，这还可能是 库文件设计者 有意为之。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;少添加源码文件进编译：&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;必定出问题，找不到头文件、函数未定义、符号未定义 等等。&lt;/p&gt;
&lt;h2 id=&#34;环境介绍&#34;&gt;&lt;a href=&#34;#环境介绍&#34; class=&#34;headerlink&#34; title=&#34;环境介绍&#34;&gt;&lt;/a&gt;环境介绍&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;本人使用的代码编写环境：VScode + stm32cubemx + EIDE + clangd&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;由于实在忍受不了keil那沟槽的编辑器，所以在知道了EIDE能直接导入keil还有cubeIDE的工程之后果断地选择跑回了vscode .jpg&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;顺带一提最近看到有大佬在vscode上整了个支持vivado的插件，也就是说现在你还能在vscode上写 FPGA的代码了。真就一个vscode写全部（&lt;/p&gt;
&lt;h2 id=&#34;前期准备（默认你各种工具都有了-jpg）&#34;&gt;&lt;a href=&#34;#前期准备（默认你各种工具都有了-jpg）&#34; class=&#34;headerlink&#34; title=&#34;前期准备（默认你各种工具都有了.jpg）&#34;&gt;&lt;/a&gt;前期准备（默认你各种工具都有了.jpg）&lt;/h2&gt;&lt;h3 id=&#34;获取LVGL源码&#34;&gt;&lt;a href=&#34;#获取LVGL源码&#34; class=&#34;headerlink&#34; title=&#34;获取LVGL源码&#34;&gt;&lt;/a&gt;获取LVGL源码&lt;/h3&gt;&lt;p&gt;LVGL源码仓库地址：&lt;a href=&#34;https://github.com/lvgl/lvgl&#34;&gt;https://github.com/lvgl/lvgl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你可以使用git将整个项目clone下来，或者你也可以在右上方点击code然后选Download ZIP把源码下载下来：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/Download_zip.png&#34; alt=&#34;Download ZIP&#34;&gt;&lt;/p&gt;
&lt;p&gt;想要不同的版本的话也可以在左上角切分支到不同的Releases版本，或者直接从右侧的Releases内下载不同版本的源码：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/%E5%88%87%E6%8D%A2%E7%89%88%E6%9C%AC.png&#34; alt=&#34;切换版本&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;LVGL源码文件夹如下图：&#34;&gt;&lt;a href=&#34;#LVGL源码文件夹如下图：&#34; class=&#34;headerlink&#34; title=&#34;LVGL源码文件夹如下图：&#34;&gt;&lt;/a&gt;LVGL源码文件夹如下图：&lt;/h4&gt;&lt;p&gt;不管版本如何变，移植到 STM32 (用 Keil 编译) 时，src 文件夹和 源码根目录 下的 .h 、.c  文件都一概先复制过去。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/LVGL%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6.png&#34; alt=&#34;LVGL源码文件&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;新建工程&#34;&gt;&lt;a href=&#34;#新建工程&#34; class=&#34;headerlink&#34; title=&#34;新建工程&#34;&gt;&lt;/a&gt;新建工程&lt;/h3&gt;&lt;p&gt;这边我们使用cubeMX新建一个STM32的工程&lt;/p&gt;
&lt;p&gt;运行LVGL的最低要求：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/%E6%9C%80%E4%BD%8E%E8%A6%81%E6%B1%82.png&#34; alt=&#34;最低要求&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;实际如果你跑demo里面的bunchmark的话上面的要求完全不够用（&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/bunchmark%E5%8D%A0%E7%94%A8.png&#34; alt=&#34;bunchmark&#34;&gt;&lt;/p&gt;
&lt;center&gt;跑bunchmark demo时的实际资源占用&lt;/center&gt;

&lt;br&gt;
&lt;br&gt;
&amp;emsp;&amp;emsp;我这边使用的mcu是stm32f412rgt6，在cubemx里面选择stm32f412rgt，然后按照自己的需求把外部高速晶振打开，主频拉到最大，使用SPI1，并把SPI1的中断和DMA给打开

&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/%E6%97%B6%E9%92%9F.png&#34; alt=&#34;时钟设置&#34; title=&#34;时钟设置&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/SPI%E8%AE%BE%E7%BD%AE.png&#34; alt=&#34;SPI设置&#34; title=&#34;SPI设置&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/%E4%B8%AD%E6%96%AD.png&#34; alt=&#34;中断设置&#34; title=&#34;中断设置&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/DMA.png&#34; alt=&#34;DMA设置&#34; title=&#34;DMA设置&#34;&gt;&lt;/p&gt;
&lt;p&gt;工程设置界面的工具链选择STM32CubeIDE，在设置完工程之后就可以生成代码了，生成代码时个人推荐选择为不同的外设生成不同的&amp;ensp;.c&amp;#x2F;.h&amp;ensp;文件，这样代码不用一股脑的全扔进main.c里面，能更方便管理。另外注意堆栈要开大一点，默认的堆栈大小跑lvgl可能会炸&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/toolchan.png&#34; alt=&#34;toolchan&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/setting.png&#34; alt=&#34;setting&#34;&gt;&lt;/p&gt;
&lt;p&gt;(注意我这边选的是copy only necessary library files)&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/stack.png&#34; alt=&#34;stack&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;代码移植&#34;&gt;&lt;a href=&#34;#代码移植&#34; class=&#34;headerlink&#34; title=&#34;代码移植&#34;&gt;&lt;/a&gt;代码移植&lt;/h2&gt;&lt;h3 id=&#34;移植LVGL&#34;&gt;&lt;a href=&#34;#移植LVGL&#34; class=&#34;headerlink&#34; title=&#34;移植LVGL&#34;&gt;&lt;/a&gt;移植LVGL&lt;/h3&gt;&lt;p&gt;工程创建好后我们先在工程根目录创建lvgls文件夹，里面新建两个文件夹，分别为存放lvgl代码的lvgl文件夹和存放自己写的lvgl相关代码的lvgl_app个人文件夹，不过后者本次工程没用到，也可以不创建&lt;/p&gt;
&lt;h4 id=&#34;项目内lvgl源码文件夹&#34;&gt;&lt;a href=&#34;#项目内lvgl源码文件夹&#34; class=&#34;headerlink&#34; title=&#34;项目内lvgl源码文件夹&#34;&gt;&lt;/a&gt;项目内lvgl源码文件夹&lt;/h4&gt;&lt;p&gt;&lt;font color=&#34;orange&#34;&gt;LVGL 源码文件夹&lt;/font&gt; 下的 demos、src 文件夹 直接原封不动复制到 lvgl 文件夹下。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#34;orange&#34;&gt;LVGL 源码文件夹&lt;/font&gt; 下的 examples 文件夹也可以直接原封不动复制过来，但实际只需要里面的 porting 文件夹，所以自己精简。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#34;orange&#34;&gt;LVGL 源码文件夹&lt;/font&gt; 根目录的  .c 、.h  文件一并复制到 lvgl 下。&lt;/p&gt;
&lt;p&gt;搞定上面的步骤后，lvgl 下的 lv_conf_template.h 复制到上一层目录 （即 lvgls 中），并改名为  lv_conf.h 。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/lvgl_files.png&#34; alt=&#34;lvgl_files&#34;&gt;&lt;/p&gt;
&lt;p&gt;将 lvgl &amp;#x2F; examples &amp;#x2F; porting 中选中的文件复制到 与 lv_conf.h 文件同一目录下，并把 template 字眼去掉。分别是 （ **disp ）显示 设备和 （**indev ）输入设备的接口。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/lvgl_conf.png&#34; alt=&#34;lvgl_conf&#34;&gt;&lt;/p&gt;
&lt;center&gt; 完成后的lvgls文件夹&lt;/center&gt;

&lt;h3 id=&#34;导入项目到EIDE&#34;&gt;&lt;a href=&#34;#导入项目到EIDE&#34; class=&#34;headerlink&#34; title=&#34;导入项目到EIDE&#34;&gt;&lt;/a&gt;导入项目到EIDE&lt;/h3&gt;&lt;p&gt;在vscode内打开EIDE，选择导入项目，在中间弹出的选项里面选择Eclipse&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/EIDE%E5%AF%BC%E5%85%A5.png&#34; alt=&#34;EIDE导入&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后选择你工程根目录下的.cproject&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/cproject.png&#34; alt=&#34;EIDE导入&#34;&gt;&lt;/p&gt;
&lt;p&gt;导入完成后，切换 VSCode 工作区&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/switch.png&#34; alt=&#34;切换工作区&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于 Eclipse CDT 和 EIDE 之间的设计差异，EIDE 暂时不能兼容 Eclipse 项目中的一些项目属性和构建设置&lt;/p&gt;
&lt;p&gt;导入完成后，将生成一个 .warning.txt 文件，其中记录了所有不兼容的 Eclipse 项目属性&lt;/p&gt;
&lt;p&gt;您需要根据这些属性的 名称 和 值 的含义修改 EIDE 项目的 构建器选项，直到可以正确编译&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/warning.png&#34; alt=&#34;warning&#34;&gt;&lt;/p&gt;
&lt;p&gt;正常情况下我们只需要改这几个就差不多了.jpg&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/%E9%85%8D%E7%BD%AE.png&#34; alt=&#34;配置&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;LVGL文件添加进工程&#34;&gt;&lt;a href=&#34;#LVGL文件添加进工程&#34; class=&#34;headerlink&#34; title=&#34;LVGL文件添加进工程&#34;&gt;&lt;/a&gt;LVGL文件添加进工程&lt;/h3&gt;&lt;p&gt;如图.jpg&lt;br&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%BA%90.png&#34; alt=&#34;项目资源&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/%E9%A1%B9%E7%9B%AE%E5%B1%9E%E6%80%A7.png&#34; alt=&#34;项目属性&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加项目属性内的包含目录时的偷懒办法：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/%E5%81%B7%E6%87%92.png&#34; alt=&#34;偷懒&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/%E5%81%B7%E6%87%922.png&#34; alt=&#34;偷懒&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这里面你可以直接将包含目录直接复制粘贴进去&lt;/p&gt;
&lt;p&gt;如果你的 lvgl 文件位置和文件夹名称和我的一样，就可以啥也不改，直接黏贴。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    - Core/Inc
    - Drivers/STM32F4xx_HAL_Driver/Inc
    - Drivers/STM32F4xx_HAL_Driver/Inc/Legacy
    - Drivers/CMSIS/Device/ST/STM32F4xx/Include
    - Drivers/CMSIS/Include
    - lvgls
    - lvgls/lvgl
    - lvgls/lvgl/src
    - lvgls/lvgl/src/core
    - lvgls/lvgl/src/display
    - lvgls/lvgl/src/draw
    - lvgls/lvgl/src/drivers
    - lvgls/lvgl/src/font
    - lvgls/lvgl/src/indev
    - lvgls/lvgl/src/layouts
    - lvgls/lvgl/src/libs
    - lvgls/lvgl/src/misc
    - lvgls/lvgl/src/osal
    - lvgls/lvgl/src/others
    - lvgls/lvgl/src/stdlib
    - lvgls/lvgl/src/themes
    - lvgls/lvgl/src/tick
    - lvgls/lvgl/src/widgets
    - lvgls/lvgl/demos
    - lvgls/lvgl/demos/benchmark
    - lvgls/lvgl/demos/widgets
    - lvgls/lvgl/demos/scroll
    - lvgls/lvgl/demos/music
    - c:/ST/STM32CubeCLT_1.16.0/GNU-tools-for-STM32/arm-none-eabi/include
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;LVGL设置&#34;&gt;&lt;a href=&#34;#LVGL设置&#34; class=&#34;headerlink&#34; title=&#34;LVGL设置&#34;&gt;&lt;/a&gt;LVGL设置&lt;/h3&gt;&lt;h4 id=&#34;给LVGL加心跳&#34;&gt;&lt;a href=&#34;#给LVGL加心跳&#34; class=&#34;headerlink&#34; title=&#34;给LVGL加心跳&#34;&gt;&lt;/a&gt;给LVGL加心跳&lt;/h4&gt;&lt;p&gt;伴随 HAL_IncTick(); 所在位置，本例是 stm32f4xx_it.c  文件中：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt; #include &amp;quot;lv_tick.h&amp;quot;

/****其它******/

void SysTick_Handler(void)
&amp;#123;
    HAL_IncTick();
    lv_tick_inc(1);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然也可以 改为 选择在 定时器中断中 执行&lt;code&gt;lv_tick_inc(1);&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;lv-conf-h中：&#34;&gt;&lt;a href=&#34;#lv-conf-h中：&#34; class=&#34;headerlink&#34; title=&#34;lv_conf.h中：&#34;&gt;&lt;/a&gt;lv_conf.h中：&lt;/h4&gt;&lt;p&gt;打开 lv_conf.h ，把 第一个 # if 0  改为 # if 1 从而使能文件，下文简称 使能文件。&lt;/p&gt;
&lt;p&gt;文件中 #define LV_COLOR_DEPTH 16  是配置屏幕色彩深度、我的 LCD 屏幕是 RGB565 , 所以保持无需变更。&lt;/p&gt;
&lt;p&gt;有使能 demo 的宏，本例跑 bunchmark 例子，所以使能：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/demo%E4%BD%BF%E8%83%BD.png&#34; alt=&#34;使能&#34;&gt;&lt;/p&gt;
&lt;p&gt;(bunchmark要求将WIDGETS也打开)&lt;/p&gt;
&lt;h4 id=&#34;lv-port-disp-c-中：&#34;&gt;&lt;a href=&#34;#lv-port-disp-c-中：&#34; class=&#34;headerlink&#34; title=&#34;lv_port_disp.c 中：&#34;&gt;&lt;/a&gt;lv_port_disp.c 中：&lt;/h4&gt;&lt;p&gt;使能文件后（注意，对应的头文件也要使能）添加需要的屏幕驱动的头文件，并修改分辨率适配自己的屏幕&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/defines.png&#34; alt=&#34;defines&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;lv_port_disp_init()&lt;/code&gt; 函数，分配内存，由于我们需要使用DMA来进行数据传输，所以使用模板的Example 2&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;LV_ATTRIBUTE_MEM_ALIGN
    static uint8_t __attribute__((section(&amp;quot;.ccmram&amp;quot;))) buf_2_1[MY_DISP_HOR_RES * 10 * BYTE_PER_PIXEL];

    LV_ATTRIBUTE_MEM_ALIGN
    static uint8_t __attribute__((section(&amp;quot;.ccmram&amp;quot;))) buf_2_2[MY_DISP_HOR_RES * 10 * BYTE_PER_PIXEL];
    lv_display_set_buffers(disp, buf_2_1, buf_2_2, sizeof(buf_2_1), LV_DISPLAY_RENDER_MODE_PARTIAL);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改&lt;code&gt;disp_flush()&lt;/code&gt;函数，这个函数是LVGL用来向屏幕写数据的函数（刷屏函数），所以需要根据对应的屏幕编写对应的代码，本例的代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static void disp_flush(lv_display_t *disp_drv, const lv_area_t *area, uint8_t *px_map)
&amp;#123;
    if (disp_flush_enabled) &amp;#123;

        uint64_t totalSize = (area-&amp;gt;x2 - area-&amp;gt;x1 + 1) * (area-&amp;gt;y2 - area-&amp;gt;y1 + 1) * BYTE_PER_PIXEL;
        while (HAL_SPI_GetState(&amp;amp;hspi1) != HAL_SPI_STATE_READY) &amp;#123;&amp;#125;
        LCD_SetWindows(area-&amp;gt;x1, area-&amp;gt;y1, area-&amp;gt;x2, area-&amp;gt;y2);
        LCD_CS_CLR;
        LCD_RS_SET;
        HAL_SPI_Transmit_DMA(&amp;amp;hspi1, (uint8_t *)(px_map), totalSize);
    &amp;#125;

    /*IMPORTANT!!!
     *Inform the graphics library that you are ready with the flushing*/
    // lv_display_flush_ready(disp_drv);
&amp;#125;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
&amp;#123;
    LCD_CS_SET;
    LCD_SetWindows(0, 0, lcddev.width - 1, lcddev.height - 1); 
    lv_display_flush_ready(disp);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;lv-port-indev-c-中：&#34;&gt;&lt;a href=&#34;#lv-port-indev-c-中：&#34; class=&#34;headerlink&#34; title=&#34;lv_port_indev.c 中：&#34;&gt;&lt;/a&gt;lv_port_indev.c 中：&lt;/h4&gt;&lt;p&gt;使能文件、添加必要的 触摸屏头文件如 &lt;code&gt;#include &amp;quot;touch.h&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;函数 lv_port_indev_init 中仅保留 touchpad 部分的代码，其他代码可以注释掉或者删除&lt;/p&gt;
&lt;p&gt;然后修改&lt;code&gt;touchpad_read()&lt;/code&gt; &lt;code&gt;touchpad_is_pressed()&lt;/code&gt; &lt;code&gt;touchpad_get_xy()&lt;/code&gt;这三个函数&lt;/p&gt;
&lt;p&gt;本例中我的代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static void touchpad_read(lv_indev_t *indev_drv, lv_indev_data_t *data)
&amp;#123;
    static int32_t last_x = 0;
    static int32_t last_y = 0;

    /*Save the pressed coordinates and the state*/
    if (touchpad_is_pressed()) &amp;#123;
        touchpad_get_xy(&amp;amp;last_x, &amp;amp;last_y);
        data-&amp;gt;state = LV_INDEV_STATE_PRESSED;
    &amp;#125; else &amp;#123;
        data-&amp;gt;state = LV_INDEV_STATE_RELEASED;
    &amp;#125;

    /*Set the last pressed coordinates*/
    data-&amp;gt;point.x = last_x;
    data-&amp;gt;point.y = last_y;
&amp;#125;

/*Return true is the touchpad is pressed*/
static bool touchpad_is_pressed(void)
&amp;#123;
    /*Your code comes here*/
    return FT6336_Scan();
    //return false;
&amp;#125;

/*Get the x and y coordinates if the touchpad is pressed*/
static void touchpad_get_xy(int32_t *x, int32_t *y)
&amp;#123;
    /*Your code comes here*/

    (*x) = tp_dev.x[0];
    (*y) = tp_dev.y[0];
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;main-c中&#34;&gt;&lt;a href=&#34;#main-c中&#34; class=&#34;headerlink&#34; title=&#34;main.c中&#34;&gt;&lt;/a&gt;main.c中&lt;/h4&gt;&lt;p&gt;引入头文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;quot;lvgl.h&amp;quot;
#include &amp;quot;lv_port_disp.h&amp;quot;
#include &amp;quot;lv_port_indev.h&amp;quot;
#include &amp;quot;lv_demos.h&amp;quot;
#include &amp;quot;lv_demo_benchmark.h&amp;quot;
#include &amp;quot;touch.h&amp;quot;
#include &amp;quot;delay.h&amp;quot;
#include &amp;quot;lcd.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;main()&lt;/code&gt;函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int main(void)
&amp;#123;
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_DMA_Init();
    MX_SPI1_Init();
    delay_init(100);
    LCD_Init();
    LCD_direction(1);
    TP_Init();
    lv_init();
    lv_port_disp_init();
    lv_port_indev_init();
    lv_demo_benchmark();
    while (1) &amp;#123;
        lv_task_handler();
        HAL_Delay(1);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;烧录前设置&#34;&gt;&lt;a href=&#34;#烧录前设置&#34; class=&#34;headerlink&#34; title=&#34;烧录前设置&#34;&gt;&lt;/a&gt;烧录前设置&lt;/h3&gt;&lt;p&gt;在构建器选项里的c&amp;#x2F;c++编译器选项内，选择c和c++的标准，推荐两个的标准都大于c11 &amp;#x2F; c++11&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/%E6%A0%87%E5%87%86%E8%AE%BE%E7%BD%AE.png&#34; alt=&#34;标准设置&#34;&gt;&lt;/p&gt;
&lt;p&gt;链接器输出格式为ELF文件&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/%E9%93%BE%E6%8E%A5%E5%99%A8.png&#34; alt=&#34;链接器&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后编译、烧录、运行、大功告成.jpg&lt;/p&gt;
&lt;h3 id=&#34;Clangd相关问题&#34;&gt;&lt;a href=&#34;#Clangd相关问题&#34; class=&#34;headerlink&#34; title=&#34;Clangd相关问题&#34;&gt;&lt;/a&gt;Clangd相关问题&lt;/h3&gt;&lt;h4 id=&#34;疯狂报错无法找到头文件&#34;&gt;&lt;a href=&#34;#疯狂报错无法找到头文件&#34; class=&#34;headerlink&#34; title=&#34;疯狂报错无法找到头文件&#34;&gt;&lt;/a&gt;疯狂报错无法找到头文件&lt;/h4&gt;&lt;p&gt;在项目里面，clangd对于头文件以及相应函数的查找都是通过&lt;code&gt;compile_commands.json&lt;/code&gt;这个文件实现的，这个文件保存了项目中每个源文件的编译命令（包括编译器、选项、头文件路径、宏定义等）。EIDE在每次构建的时候都会在&lt;code&gt;build&lt;/code&gt;文件夹下面生成对应的&lt;code&gt;compile_commands.json&lt;/code&gt;文件，但clangd默认只搜索工程根目录下是否有这个文件，不会搜索&lt;code&gt;build&lt;/code&gt;文件夹。想要clangd找到&lt;code&gt;compile_commands.json&lt;/code&gt;文件，有两个办法：&lt;/p&gt;
&lt;p&gt;一是在settings.json里面手动指定&lt;code&gt;compile_commands.json&lt;/code&gt;文件的路径&lt;/p&gt;
&lt;p&gt;二是在构建器选项的用户任务里面添加一个构建后任务，把&lt;code&gt;compile_commands.json&lt;/code&gt;复制到工程根目录里面&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/%E6%9E%84%E5%BB%BA%E5%90%8E%E4%BB%BB%E5%8A%A1.png&#34; alt=&#34;构建后任务&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;能识别lvgl等头文件但无法使用标准库的头文件&#34;&gt;&lt;a href=&#34;#能识别lvgl等头文件但无法使用标准库的头文件&#34; class=&#34;headerlink&#34; title=&#34;能识别lvgl等头文件但无法使用标准库的头文件&#34;&gt;&lt;/a&gt;能识别lvgl等头文件但无法使用标准库的头文件&lt;/h4&gt;&lt;p&gt;问题原因与上面差不多，只不过是因为&lt;code&gt;compile_commands.json&lt;/code&gt;内没包含标准库的文件路径&lt;/p&gt;
&lt;p&gt;解决办法也很简单，在项目属性-&amp;gt;包含目录里面添加使用的标准库的include路径，如：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/stm32/lvgl/vscode-EIDE%E4%B8%8B%E7%A7%BB%E6%A4%8DLVGL%E5%88%B0stm32/std%E8%B7%AF%E5%BE%84.png&#34; alt=&#34;std路径&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;用这一套环境比在keil里面写代码舒服多了.jpg&lt;/del&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kaizen857.github.io/test/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/</guid>
            <title>图片测试</title>
            <link>https://kaizen857.github.io/test/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/</link>
            <category term="test" scheme="https://kaizen857.github.io/categories/test/" />
            <category term="test" scheme="https://kaizen857.github.io/tags/test/" />
            <pubDate>Fri, 11 Apr 2025 22:53:58 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;测试图片&#34;&gt;&lt;a href=&#34;#测试图片&#34; class=&#34;headerlink&#34; title=&#34;测试图片&#34;&gt;&lt;/a&gt;测试图片&lt;/h1&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/test/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/160_60439088.png&#34; alt=&#34;这是测试图片&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kaizen857.github.io/test/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</guid>
            <title>测试文章</title>
            <link>https://kaizen857.github.io/test/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</link>
            <category term="test" scheme="https://kaizen857.github.io/tags/test/" />
            <pubDate>Fri, 11 Apr 2025 14:10:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;测试&#34;&gt;&lt;a href=&#34;#测试&#34; class=&#34;headerlink&#34; title=&#34;测试&#34;&gt;&lt;/a&gt;测试&lt;/h1&gt;&lt;p&gt;这是博客上的第一篇非自动生成的文章.jpg&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://kaizen857.github.io/test/hello-world/</guid>
            <title>Hello World</title>
            <link>https://kaizen857.github.io/test/hello-world/</link>
            <pubDate>Fri, 11 Apr 2025 13:34:12 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Welcome to &lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&#34;https://hexo.io/docs/&#34;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&#34;https://hexo.io/docs/troubleshooting.html&#34;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/hexojs/hexo/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Quick-Start&#34;&gt;&lt;a href=&#34;#Quick-Start&#34; class=&#34;headerlink&#34; title=&#34;Quick Start&#34;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&#34;Create-a-new-post&#34;&gt;&lt;a href=&#34;#Create-a-new-post&#34; class=&#34;headerlink&#34; title=&#34;Create a new post&#34;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hexo new &amp;quot;My New Post&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/writing.html&#34;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Run-server&#34;&gt;&lt;a href=&#34;#Run-server&#34; class=&#34;headerlink&#34; title=&#34;Run server&#34;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hexo server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/server.html&#34;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Generate-static-files&#34;&gt;&lt;a href=&#34;#Generate-static-files&#34; class=&#34;headerlink&#34; title=&#34;Generate static files&#34;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hexo generate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/generating.html&#34;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Deploy-to-remote-sites&#34;&gt;&lt;a href=&#34;#Deploy-to-remote-sites&#34; class=&#34;headerlink&#34; title=&#34;Deploy to remote sites&#34;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hexo deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/one-command-deployment.html&#34;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
